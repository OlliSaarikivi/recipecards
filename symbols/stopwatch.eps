%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.02.0 (http://poppler.freedesktop.org)
%%Creator: Inkscape 1.3.2 (https://inkscape.org)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 135 154
%%HiResBoundingBox: 0 0 134.346173 153.341707
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 134.346173 153.341707 re
W
q
[1 0 0 -1 0 153.341707] cm
q
/DeviceRGB {} cs
[0 0 0] sc
108.883 13.371 m
107.328 13.508 105.891 14.254 104.887 15.453 c
103.879 16.648 103.395 18.199 103.531 19.758 c
103.668 21.312 104.418 22.754 105.617 23.758 c
110.566 27.902 l
112.258 25.898 l
121.27 33.488 l
119.598 35.473 l
124.668 39.719 l
125.867 40.723 127.414 41.211 128.973 41.074 c
130.531 40.938 131.969 40.188 132.973 38.988 c
135.062 36.492 134.73 32.777 132.238 30.688 c
113.188 14.723 l
111.988 13.719 110.441 13.23 108.883 13.371 c
h
119.598 35.473 m
121.27 33.488 l
116.762 29.695 l
115.082 31.688 l
119.598 35.473 l
h
115.082 31.688 m
110.566 27.902 l
103.875 35.848 l
105.492 36.969 107.062 38.16 108.566 39.422 c
115.082 31.688 l
h
115.082 31.688 m
116.762 29.695 l
112.258 25.898 l
110.566 27.902 l
115.082 31.688 l
h
119.598 35.473 m
115.082 31.688 l
108.566 39.422 l
110.074 40.684 111.527 42.012 112.914 43.402 c
119.598 35.473 l
h
108.566 39.422 m
106.691 41.648 l
111.191 45.449 l
112.914 43.402 l
111.527 42.012 110.074 40.684 108.566 39.422 c
h
108.566 39.422 m
107.062 38.16 105.492 36.969 103.875 35.848 c
102.184 37.852 l
106.691 41.648 l
108.566 39.422 l
h
106.691 41.648 m
102.184 37.852 l
103.875 35.848 l
93.461 28.625 80.828 24.383 67.211 24.383 c
31.629 24.383 2.734 53.281 2.734 88.863 c
2.734 124.449 31.629 153.34 67.211 153.34 c
102.793 153.34 131.695 124.449 131.695 88.863 c
131.695 71.137 124.516 55.066 112.914 43.402 c
111.191 45.449 l
106.691 41.648 l
h
67.211 29.227 m
100.18 29.227 126.852 55.898 126.852 88.863 c
126.852 121.832 100.18 148.504 67.211 148.504 c
34.246 148.504 7.574 121.832 7.574 88.863 c
7.574 55.898 34.246 29.227 67.211 29.227 c
h
22.09 25.945 m
13.078 33.535 l
23.152 45.492 l
32.16 37.898 l
22.09 25.945 l
h
17.586 29.738 m
27.656 41.695 l
25.461 13.414 m
23.906 13.277 22.359 13.762 21.16 14.766 c
2.109 30.734 l
-0.387 32.82 -0.715 36.535 1.375 39.031 c
2.379 40.23 3.816 40.98 5.375 41.117 c
6.934 41.254 8.48 40.77 9.68 39.762 c
28.73 23.801 l
29.93 22.797 30.68 21.359 30.816 19.801 c
30.953 18.242 30.465 16.695 29.461 15.496 c
28.457 14.301 27.02 13.551 25.461 13.414 c
h
24.945 19.281 m
5.891 35.246 l
67.258 0 m
59.172 0 52.562 6.605 52.562 14.695 c
52.562 22.781 59.172 29.387 67.258 29.387 c
75.344 29.387 81.945 22.781 81.945 14.695 c
81.945 6.605 75.344 0 67.258 0 c
h
67.258 4.844 m
72.727 4.844 77.105 9.223 77.105 14.695 c
77.105 20.164 72.727 24.547 67.258 24.547 c
61.789 24.547 57.402 20.164 57.402 14.695 c
57.402 9.223 61.789 4.844 67.258 4.844 c
h
25.34 62.195 m
24.211 61.559 22.781 61.953 22.141 63.082 c
21.5 64.207 21.895 65.641 23.02 66.281 c
33.992 72.512 l
35.121 73.152 36.559 72.758 37.199 71.629 c
37.844 70.5 37.445 69.062 36.312 68.426 c
25.34 62.195 l
h
24.184 64.242 m
35.156 70.469 l
29.688 86.773 m
17.812 86.852 l
16.516 86.859 15.477 87.914 15.48 89.207 c
15.488 90.508 16.547 91.555 17.844 91.543 c
29.715 91.473 l
31.012 91.465 32.059 90.406 32.051 89.109 c
32.043 87.809 30.984 86.766 29.688 86.773 c
h
17.828 89.195 m
29.699 89.121 l
35.543 105.285 m
34.941 105.117 34.301 105.195 33.758 105.504 c
23.031 111.547 l
21.902 112.184 21.504 113.613 22.137 114.742 c
22.77 115.875 24.203 116.277 25.336 115.641 c
36.066 109.594 l
37.195 108.957 37.594 107.523 36.957 106.395 c
36.652 105.852 36.145 105.453 35.543 105.285 c
h
24.184 113.594 m
34.91 107.547 l
49.699 118.84 m
48.57 118.203 47.137 118.605 46.5 119.734 c
40.379 130.625 l
39.742 131.758 40.145 133.191 41.273 133.828 c
42.406 134.461 43.832 134.059 44.469 132.93 c
50.598 122.039 l
51.234 120.906 50.832 119.477 49.699 118.84 c
h
48.551 120.887 m
42.422 131.777 l
67.102 123.816 m
65.805 123.797 64.738 124.836 64.723 126.137 c
64.566 137.84 l
64.547 139.137 65.586 140.203 66.887 140.223 c
68.18 140.234 69.242 139.199 69.262 137.906 c
69.418 126.195 l
69.434 124.902 68.398 123.836 67.102 123.816 c
h
67.07 126.164 m
66.914 137.875 l
67.766 86.641 m
67.164 86.48 66.527 86.566 65.988 86.879 c
64.863 87.527 64.48 88.965 65.129 90.09 c
89.934 132.887 l
90.582 134.008 92.016 134.391 93.141 133.742 c
94.266 133.094 94.648 131.656 93.996 130.531 c
69.195 87.73 l
68.883 87.191 68.367 86.801 67.766 86.641 c
h
67.164 88.91 m
91.965 131.711 l
100.543 105.574 m
99.41 104.938 97.98 105.336 97.34 106.465 c
96.703 107.594 97.102 109.027 98.234 109.664 c
108.957 115.727 l
110.086 116.367 111.52 115.965 112.156 114.836 c
112.797 113.707 112.398 112.277 111.27 111.637 c
100.543 105.574 l
h
99.387 107.617 m
110.113 113.684 l
104.355 86.711 m
103.059 86.699 101.996 87.742 101.988 89.043 c
101.977 90.34 103.02 91.395 104.316 91.406 c
116.688 91.5 l
117.98 91.508 119.039 90.465 119.051 89.168 c
119.062 87.871 118.016 86.809 116.719 86.801 c
104.355 86.711 l
h
104.336 89.059 m
116.699 89.152 l
108.797 62.117 m
98.316 68.492 l
97.207 69.164 96.855 70.609 97.531 71.719 c
98.203 72.828 99.648 73.184 100.758 72.512 c
111.238 66.137 l
112.348 65.465 112.699 64.02 112.023 62.91 c
111.352 61.801 109.906 61.445 108.797 62.117 c
h
99.535 70.5 m
110.02 64.129 l
91.457 43.816 m
90.852 43.969 90.336 44.359 90.016 44.895 c
83.645 55.617 l
82.98 56.734 83.348 58.18 84.465 58.84 c
85.582 59.504 87.023 59.137 87.688 58.016 c
94.059 47.293 l
94.723 46.176 94.352 44.73 93.234 44.07 c
92.699 43.754 92.059 43.66 91.457 43.816 c
h
92.035 46.09 m
85.664 56.82 l
67.051 37.199 m
65.754 37.199 64.703 38.25 64.703 39.547 c
64.715 51.91 l
64.715 53.207 65.766 54.258 67.062 54.258 c
68.359 54.258 69.41 53.207 69.41 51.91 c
69.406 39.547 l
69.402 38.25 68.352 37.195 67.051 37.199 c
h
67.055 39.547 m
67.062 51.91 l
42.895 43.754 m
42.293 43.594 41.652 43.684 41.113 43.996 c
39.992 44.652 39.613 46.09 40.266 47.207 c
46.656 58.184 l
47.309 59.301 48.746 59.68 49.867 59.027 c
50.988 58.375 51.367 56.938 50.715 55.816 c
44.324 44.844 l
44.012 44.305 43.496 43.914 42.895 43.754 c
h
42.293 46.027 m
48.688 57 l
f
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
